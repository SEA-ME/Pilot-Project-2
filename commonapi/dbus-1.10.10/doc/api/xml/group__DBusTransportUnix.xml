<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__DBusTransportUnix" kind="group">
    <compoundname>DBusTransportUnix</compoundname>
    <title>DBusTransport implementations for UNIX</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusTransportUnix_1gada3df30a229b4d29ccf30af83bd88fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusTransport" kindref="compound">DBusTransport</ref> *</type>
        <definition>DBusTransport* _dbus_transport_new_for_domain_socket</definition>
        <argsstring>(const char *path, dbus_bool_t abstract, DBusError *error)</argsstring>
        <name>_dbus_transport_new_for_domain_socket</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>abstract</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a new transport for the given Unix domain socket path. </para>        </briefdescription>
        <detaileddescription>
<para>This creates a client-side of a transport.</para><para><xrefsect id="todo_1_todo000063"><xreftitle>Todo</xreftitle><xrefdescription><para>once we add a way to escape paths in a dbus address, this function needs to do escaping.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the domain socket. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abstract</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> to use abstract socket namespace </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new transport, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-transport-unix.c" line="58" column="1" bodyfile="dbus/dbus-transport-unix.c" bodystart="58" bodyend="110"/>
        <referencedby refid="group__DBusTransportUnix_1gafd694944860033155276df9162bdf72e" compoundref="dbus-transport-unix_8c" startline="221" endline="407">_dbus_transport_open_platform_specific</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusTransportUnix_1ga62d9b58f4dd550715a8f6bdb551de1f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusTransport" kindref="compound">DBusTransport</ref> *</type>
        <definition>static DBusTransport* _dbus_transport_new_for_exec</definition>
        <argsstring>(const char *path, char *const argv[], DBusError *error)</argsstring>
        <name>_dbus_transport_new_for_exec</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char *const</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a new transport for the given binary and arguments. </para>        </briefdescription>
        <detaileddescription>
<para>This creates a client-side of a transport. The process will be forked off and executed with stdin/stdout connected to a local AF_UNIX socket.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the domain socket. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new transport, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-transport-unix.c" line="124" column="1" bodyfile="dbus/dbus-transport-unix.c" bodystart="124" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusTransportUnix_1gafd694944860033155276df9162bdf72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBusTransportOpenResult</type>
        <definition>DBusTransportOpenResult _dbus_transport_open_platform_specific</definition>
        <argsstring>(DBusAddressEntry *entry, DBusTransport **transport_p, DBusError *error)</argsstring>
        <name>_dbus_transport_open_platform_specific</name>
        <param>
          <type><ref refid="structDBusAddressEntry" kindref="compound">DBusAddressEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="structDBusTransport" kindref="compound">DBusTransport</ref> **</type>
          <declname>transport_p</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Opens platform specific transport types. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>the address entry to try opening </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transport_p</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the opened transport </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the attempt </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-transport-unix.c" line="221" column="1" bodyfile="dbus/dbus-transport-unix.c" bodystart="221" bodyend="407"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="148">_dbus_assert</references>
        <references refid="group__DBusAddressInternals_1ga5b6409826263c7d62570c56889f7ddb2" compoundref="dbus-address_8c" startline="65" endline="78">_dbus_set_bad_address</references>
        <references refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" compoundref="dbus-internals_8c" startline="537" endline="554">_dbus_strdup</references>
        <references refid="group__DBusTransportUnix_1gada3df30a229b4d29ccf30af83bd88fcc" compoundref="dbus-transport-unix_8c" startline="58" endline="110">_dbus_transport_new_for_domain_socket</references>
        <references refid="group__DBusAddress_1ga7e6b2572d6e637826acada01377b5487" compoundref="dbus-address_8c" startline="227" endline="230">dbus_address_entry_get_method</references>
        <references refid="group__DBusAddress_1gae6f014689b49099e835b1f97d032034e" compoundref="dbus-address_8c" startline="244" endline="264">dbus_address_entry_get_value</references>
        <references refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" compoundref="dbus-protocol_8h" startline="357">DBUS_ERROR_NO_MEMORY</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="749" endline="764">dbus_free_string_array</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="371">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation details of <ref refid="structDBusTransport" kindref="compound">DBusTransport</ref> on UNIX. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
