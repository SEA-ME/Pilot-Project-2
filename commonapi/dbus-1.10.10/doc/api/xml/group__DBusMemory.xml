<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__DBusMemory" kind="group">
    <compoundname>DBusMemory</compoundname>
    <title>Memory Allocation</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" prot="public" static="no">
        <type>void(*</type>
        <definition>DBusFreeFunction</definition>
        <argsstring>)(void *memory)</argsstring>
        <name>DBusFreeFunction</name>
        <briefdescription>
<para>The type of a function which frees a block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-memory.h" line="64" column="1" bodyfile="dbus/dbus-memory.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>DBUS_EXPORT DBUS_MALLOC void * dbus_malloc</definition>
        <argsstring>(size_t bytes)</argsstring>
        <name>dbus_malloc</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocates the given number of bytes, as with standard malloc(). </para>        </briefdescription>
        <detaileddescription>
<para>Guaranteed to return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if bytes is zero on all platforms. Returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the allocation fails. The memory must be released with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref>.</para><para><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc()</ref> memory is NOT safe to free with regular free() from the C library. Free it with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref> only.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>allocated memory, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the allocation fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-memory.c" line="461" column="1" bodyfile="dbus/dbus-memory.c" bodystart="461" bodyend="516"/>
        <references refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</references>
        <references refid="group__DBusSysdeps_1gaa479b9fc0d2bb007667654d07452344e" compoundref="dbus-sysdeps-unix_8c" startline="2753" endline="2767">_dbus_atomic_inc</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1ga8e16f75e361d9fed43223f69baf0e2a5" compoundref="dbus-sysdeps-unix_8c" startline="2275" endline="2311">_dbus_check_dir_is_private_to_user</referencedby>
        <referencedby refid="group__DBusHashTable_1ga06555357f633c4020bbb5b78f701b39d" compoundref="dbus-hash_8c" startline="1397" endline="1400">_dbus_hash_table_get_n_entries</referencedby>
        <referencedby refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" compoundref="dbus-mempool_8c" startline="214" endline="336">_dbus_mem_pool_alloc</referencedby>
        <referencedby refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" compoundref="dbus-mempool_8c" startline="347" endline="406">_dbus_mem_pool_dealloc</referencedby>
        <referencedby refid="group__DBusString_1ga7e509d4f959d19d96f83250e62287b06" compoundref="dbus-string_8c" startline="672" endline="685">_dbus_string_copy_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>DBUS_EXPORT DBUS_MALLOC void * dbus_malloc0</definition>
        <argsstring>(size_t bytes)</argsstring>
        <name>dbus_malloc0</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocates the given number of bytes, as with standard malloc(), but all bytes are initialized to zero as with calloc(). </para>        </briefdescription>
        <detaileddescription>
<para>Guaranteed to return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if bytes is zero on all platforms. Returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the allocation fails. The memory must be released with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref>.</para><para><ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0()</ref> memory is NOT safe to free with regular free() from the C library. Free it with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref> only.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>allocated memory, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the allocation fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-memory.c" line="531" column="1" bodyfile="dbus/dbus-memory.c" bodystart="531" bodyend="588"/>
        <references refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</references>
        <references refid="group__DBusSysdeps_1gaa479b9fc0d2bb007667654d07452344e" compoundref="dbus-sysdeps-unix_8c" startline="2753" endline="2767">_dbus_atomic_inc</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" compoundref="dbus-mempool_8c" startline="214" endline="336">_dbus_mem_pool_alloc</referencedby>
        <referencedby refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" compoundref="dbus-mempool_8c" startline="347" endline="406">_dbus_mem_pool_dealloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>DBUS_EXPORT DBUS_MALLOC void * dbus_realloc</definition>
        <argsstring>(void *memory, size_t bytes)</argsstring>
        <name>dbus_realloc</name>
        <param>
          <type>void *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Resizes a block of memory previously allocated by <ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc()</ref> or <ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Guaranteed to free the memory and return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if bytes is zero on all platforms. Returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the resize fails. If the resize fails, the memory is not freed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>block to be resized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>new size of the memory block </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>allocated memory, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the resize fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-memory.c" line="601" column="1" bodyfile="dbus/dbus-memory.c" bodystart="601" bodyend="692"/>
        <references refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</references>
        <references refid="group__DBusSysdeps_1gaa479b9fc0d2bb007667654d07452344e" compoundref="dbus-sysdeps-unix_8c" startline="2753" endline="2767">_dbus_atomic_inc</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1ga8e16f75e361d9fed43223f69baf0e2a5" compoundref="dbus-sysdeps-unix_8c" startline="2275" endline="2311">_dbus_check_dir_is_private_to_user</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaeb93d137328fc8d6cc2d9f2800e5a463" compoundref="dbus-sysdeps-unix_8c" startline="1460" endline="1668">_dbus_listen_tcp_socket</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga4ed7327f9dee98711ebd7c9e5b74dec0" compoundref="dbus-message_8c" startline="4120" endline="4156">_dbus_message_loader_get_unix_fds</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_free</definition>
        <argsstring>(void *memory)</argsstring>
        <name>dbus_free</name>
        <param>
          <type>void *</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Frees a block of memory previously allocated by <ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc()</ref> or <ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If passed <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>block to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-memory.c" line="701" column="1" bodyfile="dbus/dbus-memory.c" bodystart="701" bodyend="740"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="148">_dbus_assert</references>
        <references refid="group__DBusSysdeps_1ga43a4376739482af393f8719b428f529b" compoundref="dbus-sysdeps-unix_8c" startline="2776" endline="2790">_dbus_atomic_dec</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusAddressInternals_1ga1ecc2f460303cd70c34e7667e8b12b37" compoundref="dbus-address_8c" startline="104" endline="141">_dbus_address_append_escaped</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga8e16f75e361d9fed43223f69baf0e2a5" compoundref="dbus-sysdeps-unix_8c" startline="2275" endline="2311">_dbus_check_dir_is_private_to_user</referencedby>
        <referencedby refid="group__DBusResources_1ga9911dd8fa020299a2b517251ea0be399" compoundref="dbus-resources_8c" startline="89" endline="107">_dbus_counter_new</referencedby>
        <referencedby refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" compoundref="dbus-resources_8c" startline="136" endline="154">_dbus_counter_unref</referencedby>
        <referencedby refid="group__DBusCredentials_1ga40a5c7e37b10419e233a473dc7173f3c" compoundref="dbus-credentials_8c" startline="503" endline="514">_dbus_credentials_clear</referencedby>
        <referencedby refid="group__DBusCredentials_1ga89913c830c3627cd006a50ca693af580" compoundref="dbus-credentials_8c" startline="130" endline="142">_dbus_credentials_unref</referencedby>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga1821b64302fe8e12278fa227eb11d393" compoundref="dbus-sysdeps-util-unix_8c" startline="850" endline="854">_dbus_directory_close</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaaf6eb8179fb6ea2175ed9742a0c8be68" compoundref="dbus-sysdeps-util-win_8c" startline="480" endline="544">_dbus_directory_open</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gac2d226476e6fff50bdfaace18b897fe9" compoundref="dbus-userdb_8c" startline="89" endline="92">_dbus_group_info_free</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gab9420d7a4a31329a00fd5709f8cf08ba" compoundref="dbus-userdb_8c" startline="61" endline="68">_dbus_group_info_free_allocated</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gae9408936869314101f8ea13dfa5ba968" compoundref="dbus-userdb-util_8c" startline="388" endline="433">_dbus_groups_from_uid</referencedby>
        <referencedby refid="group__DBusHashTable_1ga06555357f633c4020bbb5b78f701b39d" compoundref="dbus-hash_8c" startline="1397" endline="1400">_dbus_hash_table_get_n_entries</referencedby>
        <referencedby refid="group__DBusHashTable_1ga7aa7b6054c5fbf8852bad79d372580dd" compoundref="dbus-hash_8c" startline="285" endline="337">_dbus_hash_table_new</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1ga72b51ab910e7e9a16195a59ff42bb969" compoundref="dbus-sysdeps-unix_8c" startline="1235" endline="1319">_dbus_listen_systemd_sockets</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaeb93d137328fc8d6cc2d9f2800e5a463" compoundref="dbus-sysdeps-unix_8c" startline="1460" endline="1668">_dbus_listen_tcp_socket</referencedby>
        <referencedby refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" compoundref="dbus-mempool_8c" startline="347" endline="406">_dbus_mem_pool_dealloc</referencedby>
        <referencedby refid="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" compoundref="dbus-mempool_8c" startline="187" endline="204">_dbus_mem_pool_free</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga51299aab1f5e0b2408ab858d3377b20c" compoundref="dbus-message_8c" startline="4043" endline="4059">_dbus_message_loader_unref</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga7639e273ab160c422a7cef0cda60ded5" compoundref="dbus-object-tree_8c" startline="143" endline="155">_dbus_object_tree_unref</referencedby>
        <referencedby refid="group__DBusServerInternals_1ga93b5bca90e69122d5acbbeef2b4ca03e" compoundref="dbus-server_8c" startline="201" endline="226">_dbus_server_finalize_base</referencedby>
        <referencedby refid="group__DBusServerUnix_1gaec00cdf4977b9bd33621df684406a779" compoundref="dbus-server-unix_8c" startline="54" endline="290">_dbus_server_listen_platform_specific</referencedby>
        <referencedby refid="group__DBusServerUnix_1ga21ce093bda6ce6c7f94d1d894b6b4358" compoundref="dbus-server-unix_8c" startline="301" endline="373">_dbus_server_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusServerSocket_1ga047d05c427e9a1fc5823fdfdcec5c5f6" compoundref="dbus-server-socket_8c" startline="399" endline="521">_dbus_server_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1gad13a7c789c5cdcc3bcd0e80232efbd77" compoundref="dbus-sysdeps_8c" startline="226" endline="337">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusString_1ga89d458f4f530ee82dbb45f9dcbc9c637" compoundref="dbus-string-util_8c" startline="90" endline="114">_dbus_string_find_byte_backward</referencedby>
        <referencedby refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1ga1b399ef2d7f128e59bb32dbb5b590e1b" compoundref="dbus-timeout_8c" startline="211" endline="223">_dbus_timeout_list_free</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1ga6527af11feecf5d50fd9d5b674f94406" compoundref="dbus-timeout_8c" startline="107" endline="122">_dbus_timeout_unref</referencedby>
        <referencedby refid="group__DBusTransport_1gaf27a2aceb062921f3915acb1491a646a" compoundref="dbus-transport_8c" startline="216" endline="236">_dbus_transport_finalize_base</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga55dbb78c415da040037442eca4c4e80e" compoundref="dbus-userdb_8c" startline="623" endline="644">_dbus_user_database_unref</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaa40334f7b4f185a437a8bc6d6e0994a1" compoundref="dbus-userdb_8c" startline="76" endline="81">_dbus_user_info_free</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaf725ba6f380a3b926650626eef714b67" compoundref="dbus-userdb_8c" startline="45" endline="52">_dbus_user_info_free_allocated</referencedby>
        <referencedby refid="group__DBusWatchInternals_1ga1fe225c4194c30dfe54be322e8519da5" compoundref="dbus-watch_8c" startline="249" endline="260">_dbus_watch_list_free</referencedby>
        <referencedby refid="group__DBusAddress_1ga37a7009b07cf991ff07f3e86d71bf352" compoundref="dbus-address_8c" startline="189" endline="196">dbus_address_entries_free</referencedby>
        <referencedby refid="group__DBusConnection_1gad0ea06307b418616711131ea7bdae8ac" compoundref="dbus-connection_8c" startline="3191" endline="3202">dbus_connection_free_preallocated_send</referencedby>
        <referencedby refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" compoundref="dbus-errors_8c" startline="211" endline="226">dbus_error_free</referencedby>
        <referencedby refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="749" endline="764">dbus_free_string_array</referencedby>
        <referencedby refid="group__DBusMessage_1ga4bed3858b3b48ec7c86d9fc56a6ce372" compoundref="dbus-message_8c" startline="1610" endline="1679">dbus_message_copy</referencedby>
        <referencedby refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" compoundref="dbus-memory_8c" startline="601" endline="692">dbus_realloc</referencedby>
        <referencedby refid="group__DBusServer_1gac2bfa9f2e06c4347fefe537b233660d3" compoundref="dbus-server_8c" startline="1167" endline="1183">dbus_server_get_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_free_string_array</definition>
        <argsstring>(char **str_array)</argsstring>
        <name>dbus_free_string_array</name>
        <param>
          <type>char **</type>
          <declname>str_array</declname>
        </param>
        <briefdescription>
<para>Frees a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>-terminated array of strings. </para>        </briefdescription>
        <detaileddescription>
<para>If passed <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str_array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-memory.c" line="749" column="1" bodyfile="dbus/dbus-memory.c" bodystart="749" bodyend="764"/>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <referencedby refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1244" endline="1327">_dbus_decompose_path</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaae48868ce818ad287cdae113aabcc858" compoundref="dbus-sysdeps-util_8c" startline="49" endline="81">_dbus_get_environment</referencedby>
        <referencedby refid="group__DBusServerInternals_1ga93b5bca90e69122d5acbbeef2b4ca03e" compoundref="dbus-server_8c" startline="201" endline="226">_dbus_server_finalize_base</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gafd694944860033155276df9162bdf72e" compoundref="dbus-transport-unix_8c" startline="221" endline="407">_dbus_transport_open_platform_specific</referencedby>
        <referencedby refid="group__DBusConnection_1ga08ee6e70b74c294fe24d0f391f16db24" compoundref="dbus-connection_8c" startline="6053" endline="6077">dbus_connection_get_object_path_data</referencedby>
        <referencedby refid="group__DBusConnection_1ga3e9de2067d0eed66ef73230fae8d8be2" compoundref="dbus-connection_8c" startline="6090" endline="6112">dbus_connection_list_registered</referencedby>
        <referencedby refid="group__DBusConnection_1ga6ae8f005dedf24c5f2df1768795392fb" compoundref="dbus-connection_8c" startline="6021" endline="6040">dbus_connection_unregister_object_path</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1ga01912903e39428872920d861ef565bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>dbus_shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Frees all memory allocated internally by libdbus and reverses the effects of <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>libdbus keeps internal global variables, for example caches and thread locks, and it can be useful to free these internal data structures.</para><para><ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> does NOT free memory that was returned to the application. It only frees libdbus-internal data structures.</para><para>You MUST free all memory and release all reference counts returned to you by libdbus prior to calling <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref>.</para><para>If a shared connection is open, calling <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> will drain its queue of messages and disconnect it. In particular, this will result in processing of the special Disconnected signal, which may result in a call to _exit(), unless you have used <ref refid="group__DBusConnection_1ga19091beb74f1504b0e862a7ad10e71cd" kindref="member">dbus_connection_set_exit_on_disconnect()</ref> to disable that behaviour.</para><para>You can&apos;t continue to use any D-Bus objects, such as connections, that were allocated prior to <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref>. You can, however, start over; call <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> again, create new connections, and so forth.</para><para>WARNING: <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> is NOT thread safe, it must be called while NO other threads are using D-Bus. (Remember, you have to free all D-Bus objects and memory before you call <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref>, so no thread can be using libdbus.)</para><para>The purpose of <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> is to allow applications to get clean output from memory leak checkers. <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> may also be useful if you want to dlopen() libdbus instead of linking to it, and want to be able to unload the library again.</para><para>There is absolutely no requirement to call <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> - in fact, most applications won&apos;t bother and should not feel guilty.</para><para>You have to know that nobody is using libdbus in your application&apos;s process before you can call <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref>. One implication of this is that calling <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> from a library is almost certainly wrong, since you don&apos;t know what the rest of the app is up to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-memory.c" line="897" column="1" bodyfile="dbus/dbus-memory.c" bodystart="897" bodyend="918"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__DBusMemory_1ga54ccb556e7964112a825a7f46c156ca0" prot="public" static="no">
        <name>dbus_new</name>
        <param><defname>type</defname></param>
        <param><defname>count</defname></param>
        <initializer>((type*)<ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc</ref> (sizeof (type) * (count)))</initializer>
        <briefdescription>
<para>Safe macro for using <ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Accepts the type to allocate and the number of type instances to allocate as arguments, and returns a memory block cast to the desired type, instead of as a void*.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type name to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of instances in the allocated array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new memory block or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-memory.h" line="58" column="9" bodyfile="dbus/dbus-memory.h" bodystart="58" bodyend="-1"/>
        <referencedby refid="group__DBusSysdeps_1ga8e16f75e361d9fed43223f69baf0e2a5" compoundref="dbus-sysdeps-unix_8c" startline="2275" endline="2311">_dbus_check_dir_is_private_to_user</referencedby>
        <referencedby refid="group__DBusCredentials_1ga749dd398d725f37a7943d60074785844" compoundref="dbus-credentials_8c" startline="71" endline="88">_dbus_credentials_new</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gae9408936869314101f8ea13dfa5ba968" compoundref="dbus-userdb-util_8c" startline="388" endline="433">_dbus_groups_from_uid</referencedby>
        <referencedby refid="group__DBusHashTable_1ga06555357f633c4020bbb5b78f701b39d" compoundref="dbus-hash_8c" startline="1397" endline="1400">_dbus_hash_table_get_n_entries</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1ga72b51ab910e7e9a16195a59ff42bb969" compoundref="dbus-sysdeps-unix_8c" startline="1235" endline="1319">_dbus_listen_systemd_sockets</referencedby>
        <referencedby refid="group__DBusServerSocket_1gac670783fbeff989b171638439d8c2d1f" compoundref="dbus-server-socket_8c" startline="285" endline="377">_dbus_server_new_for_socket</referencedby>
        <referencedby refid="group__DBusMessage_1ga4bed3858b3b48ec7c86d9fc56a6ce372" compoundref="dbus-message_8c" startline="1610" endline="1679">dbus_message_copy</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" prot="public" static="no">
        <name>dbus_new0</name>
        <param><defname>type</defname></param>
        <param><defname>count</defname></param>
        <initializer>((type*)<ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0</ref> (sizeof (type) * (count)))</initializer>
        <briefdescription>
<para>Safe macro for using <ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Accepts the type to allocate and the number of type instances to allocate as arguments, and returns a memory block cast to the desired type, instead of as a void*. The allocated array is initialized to all-bits-zero.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type name to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of instances in the allocated array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new memory block or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-memory.h" line="59" column="9" bodyfile="dbus/dbus-memory.h" bodystart="59" bodyend="-1"/>
        <referencedby refid="group__DBusResources_1ga9911dd8fa020299a2b517251ea0be399" compoundref="dbus-resources_8c" startline="89" endline="107">_dbus_counter_new</referencedby>
        <referencedby refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1244" endline="1327">_dbus_decompose_path</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaaf6eb8179fb6ea2175ed9742a0c8be68" compoundref="dbus-sysdeps-util-unix_8c" startline="754" endline="786">_dbus_directory_open</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaae48868ce818ad287cdae113aabcc858" compoundref="dbus-sysdeps-util_8c" startline="49" endline="81">_dbus_get_environment</referencedby>
        <referencedby refid="group__DBusHashTable_1ga7aa7b6054c5fbf8852bad79d372580dd" compoundref="dbus-hash_8c" startline="285" endline="337">_dbus_hash_table_new</referencedby>
        <referencedby refid="group__DBusMemPool_1gaf1bae02bc5fcb879f77ff2c13ca03ac8" compoundref="dbus-mempool_8c" startline="138" endline="179">_dbus_mem_pool_new</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga66f1c10cf909ba09ed732bc125ff8671" compoundref="dbus-message_8c" startline="3981" endline="4020">_dbus_message_loader_new</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga5920f14b487122f13a3d439952d5ed2e" compoundref="dbus-object-tree_8c" startline="92" endline="121">_dbus_object_tree_new</referencedby>
        <referencedby refid="group__DBusServerSocket_1gac670783fbeff989b171638439d8c2d1f" compoundref="dbus-server-socket_8c" startline="285" endline="377">_dbus_server_new_for_socket</referencedby>
        <referencedby refid="group__DBusServerSocket_1ga047d05c427e9a1fc5823fdfdcec5c5f6" compoundref="dbus-server-socket_8c" startline="399" endline="521">_dbus_server_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1ga5b122b35cdb3926b7dc2d084ddff9d62" compoundref="dbus-timeout_8c" startline="194" endline="203">_dbus_timeout_list_new</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1gaa3a12ccc1e6772d7bc143ce8edfa886b" compoundref="dbus-timeout_8c" startline="63" endline="84">_dbus_timeout_new</referencedby>
        <referencedby refid="group__DBusTransportSocket_1ga04f8d1f6aec1fd760d5e6847b4a10495" compoundref="dbus-transport-socket_8c" startline="1275" endline="1336">_dbus_transport_new_for_socket</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gafd694944860033155276df9162bdf72e" compoundref="dbus-transport-unix_8c" startline="221" endline="407">_dbus_transport_open_platform_specific</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga959372f7d7cdea35ffbac3b78e29a1b0" compoundref="dbus-userdb_8c" startline="128" endline="216">_dbus_user_database_lookup</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaf6b7452691c0c7d11fec4b9214137052" compoundref="dbus-userdb-util_8c" startline="246" endline="333">_dbus_user_database_lookup_group</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga1dbf2c80952d17707c544f5d86dd8545" compoundref="dbus-userdb_8c" startline="550" endline="587">_dbus_user_database_new</referencedby>
        <referencedby refid="group__DBusWatchInternals_1ga19c761997dbbf753c826389c7950d3eb" compoundref="dbus-watch_8c" startline="232" endline="241">_dbus_watch_list_new</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gac4ff38c7e9e6cc21f79aa2bc4fa67d3d" compoundref="dbus-watch_8c" startline="88" endline="115">_dbus_watch_new</referencedby>
        <referencedby refid="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" compoundref="dbus-connection_8c" startline="5723" endline="5760">dbus_connection_add_filter</referencedby>
        <referencedby refid="group__DBusMessage_1ga4bed3858b3b48ec7c86d9fc56a6ce372" compoundref="dbus-message_8c" startline="1610" endline="1679">dbus_message_copy</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc()</ref>, <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref>, etc. </para>    </briefdescription>
    <detaileddescription>
<para>Functions and macros related to allocating and releasing blocks of memory. </para>    </detaileddescription>
  </compounddef>
</doxygen>
